{
  "name": "collections/blog/posts/90db6460d621",
  "__resolveType": "blog/loaders/Blogpost.ts",
  "post": {
    "authors": [],
    "categories": [
      {
        "name": "Tech Insights",
        "slug": "techinsights"
      }
    ],
    "title": "How to Manage a Software Engineering Team During PMF Phase",
    "excerpt": "By Luan Guimaraes, co-founder and CTO at deX Labs",
    "date": "2024-07-16",
    "slug": "manageduringpmf",
    "content": "<p><em>By </em><a target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"af ne\" href=\"https://www.linkedin.com/in/luanguimaraesla/\"><em><u>Luan Guimaraes</u></em></a><em>, co-founder and CTO at deX Labs</em></p><p>Hi! This article describes our approach to dealing with product management in the early stages of a highly technical business like deX.</p><blockquote><p>The ultimate goal is to (1) generate ideas that meet business needs and (2) lead the team to implement them quickly and with high quality.</p></blockquote><p>So far, we‚Äôve been successful in managing the technical team and building a functional interface between them and the product. Especially as young entrepreneurs, we understand that organizing all the tasks is hard, and that‚Äôs why we decided to share how we do it.</p><h1><strong>The seven guidelines of our process</strong></h1><p>First of all, we list the 7 fundamental principles of our process.</p><ol><li><p>Our team values agile, flexible, and asynchronous work.</p></li><li><p>Our process is designed to increase the efficiency of asynchronous work.</p></li><li><p>We set deadlines to help prioritize tasks, not to create chaos.</p></li><li><p>We always plan and align before we execute.</p></li><li><p>The board is our central hub; a disorganized board indicates a chaotic team and a poorly executed product.</p></li><li><p>It‚Äôs everyone‚Äôs responsibility to provide visibility and organize their own work.</p></li><li><p>We never start work without first describing a card for the task.</p></li></ol><p>So, let‚Äôs get started.</p><h1><strong>Our tool of choice, GitHub Projects</strong></h1><p>We decided to use GitHub Projects as our main task management tool. I admit that it‚Äôs not the most popular tool, but in our case, we found all the functionality we needed AND it‚Äôs really close to the code. All of the following boards, tasks, and tags are built on top of GitHub Projects.</p><h1><strong>Not Scrum, nor anything similar</strong></h1><p>Although we use certain terms and practices from agile methodologies such as Scrum and XP, our process is unique and continuously adapts to our specific context.</p><p>We have developed our own way of working based on past professional experience and the organizational methods of open source communities in distributed environments.</p><p>In practice, we hold only one weekly meeting to address any roadblocks and determine the team‚Äôs next steps. Most planning is done asynchronously through issues, design documents, and comments. Occasionally, we have additional meetings to discuss specific issues that require immediate attention, but these are rare, and we prioritize minimizing unnecessary meetings.</p><h1><strong>Process Simplifications</strong></h1><p>Each process requires different levels of abstraction to effectively translate business needs into actionable tasks that deliver tangible solutions.</p><p>All stakeholders should be able to understand the solution domain and interact across these different levels of abstraction to ensure that business and development expectations are aligned.</p><p>At deX, we organize our work around the following abstractions:</p><p><img src=\"https://miro.medium.com/v2/resize:fit:697/1*c2sV77lPrz8dNiN0F-SGVA.png\" alt=\"\"></p><h1><strong>Releases</strong></h1><p>Releases are the highest abstraction of a deliverable. They are sequential; ideally, we would only work on one at a time. It is the role of deX leadership, with the help of the entire team, to define the following business objectives and propose future releases based on them.</p><p>Releases typically have a leading theme (e.g. ingestion integration, ETL module integration) but can have additional work fronts. They are composed of epics and typically last about a quarter but can be shorter or longer depending on the complexity of the implementation.</p><p>The development of a release may involve several refinement cycles with design documents and brainstorming sessions. It is up to the deX leadership to involve the necessary stakeholders in the release design and segmentation of the release into one or more <em>Epics</em>.</p><blockquote><p><em>üìå The release manager is the person responsible for bootstrapping the Release.</em></p></blockquote><p>Our releases have a title and a versioned ID, for example, <code>v0</code>: <em>Transformation Backend Release</em> and <code>v1</code>: <em>Ingestion Integration Release</em>. We have a list of releases and their respective epics on a Github Projects dashboard.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*sdU2yuFfqCJi4jgijbdUfQ.png\" alt=\"\"></p><p>Epic and Releases Dashboard</p><blockquote><p><em>‚ö†Ô∏è It is mandatory for all other abstractions, from Epics to Tasks and Bug Reports, to identify the </em><code>Release</code><em> parameter to which they are linked.</em></p></blockquote><h1><strong>Epics</strong></h1><p><em>Epics </em>are the follow-on element within releases that represent a large, cohesive set of <em>Features</em> and <em>Operations</em>. They describe complete user experiences or significant changes that have a major impact on the platform.</p><p>Each <em>Epic</em> is associated with a single <em>Release</em>, and there is no predefined deadline for its completion due to the varying complexity of each <em>Epic</em>. Therefore, once the <em>Features</em> and <em>Operations</em> that comprise each <em>Epic</em> have been planned, it is the responsibility of the Release Manager to establish an estimated delivery timeframe for the Epic.</p><p>Unlike <em>Releases</em> which contain only a title and a version tag, we create each <em>Epic</em> by defining issues with the parameter <code>Kind: Epic</code> and the label <code>kind/epic</code> in the project.</p><p><em>Epics</em> also have a unique ID (e.g., <code>EP01</code>, <code>EP02</code>) that grows sequentially.</p><blockquote><p><em>‚ö†Ô∏è All Features, Operations, and other abstractions under an Epic must have the </em><code>Epic</code><em> parameter to which they are linked.</em></p></blockquote><p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*t_eB7NPvimzF5yJoyQcEZA.png\" alt=\"\"></p><p>Epics, Features, and <em>Operations</em></p><blockquote><p><em>üìåEach release contains a specific Epic called </em><strong><em>Meta</em></strong><em>. This Epic is used to define issues that are not related to the goals of the release itself, but rather to aggregate configuration tasks and monitoring of the release itself.</em></p></blockquote><h1><strong>Features and Operations</strong></h1><p><strong><em>Features</em></strong><em>,</em> as the name implies, are standalone functionalities that can represent an experience, a resource, a flow, or any other deliverable that impacts the user experience. <em>Features</em> are entirely user-facing and should provide clear value from our customers‚Äô perspective.</p><p>Each <em>Feature</em> belongs to only one <em>Epic</em> and must be referenced by an issue with the parameter <code>Kind: Feature</code> and the label <code>kind/feature</code> within the project.</p><p>We believe that a comprehensive description of a <em>Feature</em> is crucial. The description should include the design, acceptance criteria, and any other essential information to ensure a clear understanding of the work for all involved parties.</p><p>Initially, the person responsible for defining the <em>Release</em> configures and describes all the <em>Epics</em> and their respective <em>Features</em> to align them with the goals of the <em>Release</em> and organize them from a business perspective. However, it is unrealistic to expect a fully finalized description and design at this stage, as the release manager and leadership may not have all the technical insight required to conceive certain <em>Features</em>.</p><p>Therefore, it‚Äôs critical that those responsible for executing/implementing <em>Features</em> understand the context, clarify any points, and even enhance the documentation before breaking down the deliverable <em>Tasks.</em></p><p><em>Features</em> are not product area-specific. We do not create different features to describe a functionality that requires tasks from design, backend, and frontend to build. As the process progresses, each squad will have the opportunity to break down their own deliverable <em>Tasks</em> and coordinate their work with the other involved squads to efficiently deliver the entire <em>Feature</em>.</p><blockquote><p><em>üìå The only issue that describes each Feature aggregates several sub-tasks from different areas.</em></p></blockquote><p>Successful integration of different responsibilities requires a high degree of autonomy and proactivity. Team members must reach out to stakeholders and get the clarification they need to get their work done.</p><p><em>Features</em> do not have IDs, so we do not have a specific parameter to associate tasks with their respective <em>Features</em>. Instead, we use a [suboptimal] feature of Github to keep track of which <em>Tasks </em>are under which <em>Features</em>. In the section on <strong>Managing Tasks</strong> below, you can see how we do this in practice.</p><p><em>Operations</em> follow the same principles as <em>Features</em> but are used to define non-user-facing goals. These can be infrastructure features, environment configuration, development process improvements, performance optimizations, etc.</p><p>This distinction is critical to understanding the amount of time we spend implementing functionality that directly benefits customers versus the amount of time we spend optimizing and improving internal processes. It serves as a benchmark that allows us to improve our prioritization processes and consistently strive for maximum efficiency, balancing quality and speed in our deliveries.</p><p><em>Operations</em> are defined by issues with the parameter <code>Kind: Operation</code> and the label <code>kind/operation</code> on the General project.</p><blockquote><p><em>üìå You can see how we create Features and Operations in the section </em><strong><em>Managing Releases.</em></strong></p></blockquote><h1><strong>Tasks</strong></h1><p><em>Tasks</em> represent deliverables at their most basic level. They are created by the team members responsible for developing <em>Features</em> and <em>Operations</em> and should have only one owner.</p><p>Each <em>Task</em> becomes a card in the Development Backlog or on the Development Board. We‚Äôll talk about these boards in the section <strong>Managing Tasks</strong> below, but here‚Äôs a screenshot of our development board.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*pe0iMkkeFZBCEE_H9sE3nw.png\" alt=\"\"></p><p>We do not have sprints or any other concept that limits the life of a <em>Task </em>itself. In fact, the owner can define <em>Tasks</em> as granularly as they like. Some like to see their work move through the boards with many small <em>Tasks</em>, while others prefer to describe an entire deliverable in just one card.</p><blockquote><p><em>The main tip is to define Tasks of a reasonable size so as not to flood the board, which is a shared environment. As a general rule, think of a deliverable that can be completed through a Pull Request, not a commit. You wouldn‚Äôt split a Task into two cards, ‚Äúmake component X‚Äù and another ‚Äútest component X‚Äù.</em></p></blockquote><p>As with <em>Features</em> and <em>Operations</em>, we value a clear description of the work being developed in each <em>Task</em>. Therefore, it is important for the task owner to provide a thorough description of the body of the issue. This description allows others to evaluate the work, track its progress, and actively participate through comments.</p><p>From a management perspective, the <em>Task </em>is the most important element. It allows us to allocate resources to the right initiatives, prioritize critical work, leverage dependent solutions, and resolve conflicts between different areas. Therefore, the development board is our primary tool during the weekly team alignment meeting.</p><p>During this meeting, we review all completed, in-review, and in-progress tasks on the board and align the team for the upcoming week. It is important to note that this meeting does not represent the end or beginning of a Scrum Sprint; it simply serves as a checkpoint to ensure that the team continues to work efficiently and without roadblocks.</p><h1><strong>Bug Reports, Technical Debts, and Trackers</strong></h1><p><em>Bug Reports</em> and <em>Technical Debts</em> are specialized task types that define deliverables. These items should have a single responsible party and, like <em>Tasks,</em> should have a clear description of the work that needs to be done.</p><p><em>Bug Reports</em> should be issues with the parameter <code>Kind: Bug Report</code> and the label <code>bug</code>. <em>Technical Debts</em> should use the parameter <code>Kind: Technical Debt</code>. Both should be associated with the current release when they are created.</p><p>There are two particular issues called ‚Äú<em>Release Bug Tracker</em>‚Äù and ‚Äú<em>Release Technical Debt Tracker</em>‚Äù under the <strong>Epic</strong> <code>Meta</code> of each release. These issues are of the type <code>Kind: Tracker</code> and are intended solely to aggregate the effort expended on resolving technical debts and bugs within the context of a release.</p><h1><strong>Other Types of Issues</strong></h1><p><strong>Partial Task:</strong> These are usually subtasks that need to be reviewed during the development cycle of the primary <em>Task</em>. This card is often a PR with partial changes and must contain the reference to the primary <em>Task</em> to which it is associated. Like the <em>Task</em>, it should have a detailed description of the work being done.</p><p><strong>Feature Request:</strong> This is our primary mechanism for gathering ideas and needs that will shape future <em>Releases</em>. Feature Requests start as ideas and suggestions, but should be refined through comments on GitHub until they are ready to become features and operations in future releases. The person who created the issue is responsible for tracking the progress of the work being developed.</p><blockquote><p><em>üìé The team can suggest new ideas through Feature Requests on a specific board</em></p></blockquote><p><strong>Security Issue:</strong> These are highly critical issues that require immediate attention. They refer to security issues that could put deX users and internal information at risk.</p><p><strong>Experiment: </strong>An issue that is not tied to a release and is used for experimentation, whether with new tools, libraries, or even evaluating competing platforms.</p><h1><strong>Project Tree Overview</strong></h1><p>When you put it all together, this is what we have.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:698/1*C6uO2fmf-q6nkWMGwuSE1g.png\" alt=\"\"></p><p>Project Tree Overview</p><h1><strong>Managing Releases</strong></h1><p>Release management begins with the collaborative definition of what will be delivered in the Release. This is done by the deX leadership and team, who evaluate business objectives, high-value deliverables, and the feature request list.</p><p>Once the implementation plan is complete, the release manager is responsible for designing the key architectures and understanding the key requirements of the components to be developed.<br>After validation, the work is broken down into large <em>Epics</em>, <em>Features</em>, and <em>Operations</em>.</p><p>The Release Manager‚Äôs job is to transfer all these discussions, documents, and descriptions to Github on a new page in the <strong>Epics Dashboard</strong>.<br>When <em>Features</em> and <em>Operations</em> are ready for development, the Release Manager notifies the team. Each person assigned to work on the features is responsible for understanding the context and defining the deliverable tasks.</p><h1><strong>Managing Tasks</strong></h1><p>Here‚Äôs a decision tree to help developers decide what to do next.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:553/1*9YsNACrb-aIjrOkJghiunA.png\" alt=\"\"></p><p>Taks Management Flowchart</p><h1><strong>Understanding the Problem</strong></h1><p>If you are assigned to develop a <em>Feature</em>, your first step should be to visit <strong>Epic‚Äôs Dashboard</strong> and thoroughly read the description of the <em>Feature </em>or <em>Operation</em>.</p><p>Since the release manager may not have provided all the details regarding the development of the functionality, it is everyone‚Äôs responsibility to consider the full context of the feature. If necessary, improve the descriptions, define and refine acceptance criteria, and involve other stakeholders to resolve any outstanding issues.</p><blockquote><p><em>üìé For more complex features, or when it is difficult to visualize potential solutions, it is advisable to create a design document to evaluate the work to be developed in advance.</em></p></blockquote><h1><strong>Creating Tasks</strong></h1><p>Once you fully understand the context of the feature you are developing, it is time to create tasks.</p><blockquote><p><strong><em>üö®</em></strong><em> We always start by defining a Task on the Board, which includes a description of the work.</em></p></blockquote><h1><strong>Steps for Creating Tasks</strong></h1><ol><li><p>Go to the Tasks Board.</p></li><li><p>Create a new card by clicking on ‚Äò+ Add item‚Äô.</p></li><li><p>Define the title of the task clearly and directly.</p></li><li><p>Provide a detailed description.</p></li><li><p>Link the card to the corresponding feature or operation.</p></li><li><p>Add a label that indicates the task‚Äôs type, such as <code>Task</code>, <code>Security Issue</code>, <code>Bug Report</code>, etc.</p></li><li><p>Assign the task to yourself.</p></li></ol><h1><strong>Tracking Tasks Through Their Lifecycle</strong></h1><p>Task lifecycle management involves two different boards: <strong>Development Backlog</strong> and <strong>Development Board</strong>. Although these two views are separate, they are a continuation of the same workflow.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*O5byT9-0B00gRvnFBJlFaQ.png\" alt=\"\"></p><p>Task Lifecycle</p><p>Our <strong>Development Backlog</strong> board ends in <code>Promoted</code>, and the <strong>Development Board</strong> begins there. The end of one board corresponds to the starting column of the other board, ensuring a continuous flow of tasks from our backlog until they are ready for development.</p><p>As mentioned in our <em>Task</em> creation example, we start with the task at the ‚ÄòPromoted‚Äô stage. However, it is perfectly acceptable to place a task in the backlog instead of the development board. This is often the case with Technical Debt and less critical Bugs.</p><p>It is important that everyone feels responsible for managing the issues queue properly, and that starts with understanding how issues should be moved through the development cycle.</p><h1><strong>Understanding the Columns in the Development Cycle</strong></h1><p><strong>Sketch:</strong> This column contains general ideas that are not well developed and need to be discussed and adjusted before entering the development workflow. Many cards in this column are just sketches and are not part of a release.</p><p><strong>Semester: </strong>This column represents our most distant deadline. We avoid expending effort on tasks that are not within a six-month horizon; that is, if you are looking at a task that is a year away, it should not be your current concern. Often tasks in this column are not well documented and may not be part of releases or features. That‚Äôs okay ‚Äî tasks here will be refined in later columns until they are ready for development.</p><p><strong>Quarter: </strong>Technical debt, bugs, and even tasks that are meant to be done only at the end of a release are typically placed here. We have a ~3-month horizon to address these items. The team manager ensures that tasks on this board actually get done, but the creator of the task is responsible for monitoring its progress through the cycle.</p><p><strong>Prioritize: </strong>Issues should be prioritized as soon as possible and need a better description. The creator of the task should refine the requirements and acceptance criteria, and provide any additional information to ensure full assignment and execution of the task.</p><p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*gKONxlNbEyPMwrHOpbbrUw.png\" alt=\"\"></p><p>Development Backlog</p><p>Although well described, these issues may not yet be part of a release and may not have an owner.</p><p>The Team Leader often visits this board to assign new tasks and promote those that are ready for development.</p><p><strong>Promoted</strong>: At this stage, a <em>Task </em>should have a thorough description, an owner, and all of the required parameters: <code>Release</code>, <code>Kind</code>, <code>Domain</code>, <code>Priority</code>, <code>Epic</code>, <code>Progress</code>. If you have a card in this column, it is important to move it to ‚ÄòScheduled‚Äô as quickly as possible.</p><p><strong>Scheduled</strong>: Once a card enters this stage, the owner party must define an estimated timeline for completion of the task, setting the parameters <code>Task start</code> and <code>Task end</code>.</p><p>They must be accountable for proper time management. This deadline is important for the manager to provide the rest of the company with a picture and estimates of when tasks will be completed.</p><p>Tasks in this column are ready to be developed as soon as the owner is able to do so.</p><p><strong>In Progress</strong>: Cards here are actively being developed. If this is a development task, a pull request needs to be associated with this issue. The easiest way to do this is to create a draft PR and in the PR description add <code>Closes #&lt;issue-id&gt;</code>, which will automatically link the PR to the issue.</p><p>We interact a lot through these cards, so use Github‚Äôs issue comments to raise any questions and tag necessary people.</p><p><strong>Review</strong>: When a task is completed, it doesn‚Äôt go straight to ‚ÄòDone‚Äô. Our process relies heavily on a culture of peer review, which means someone has to review your work before it‚Äôs considered done.</p><p>For an issue with a linked PR, you‚Äôll need to set your PR to <code>Ready for Review</code> and assign a team member to review it. In the meantime, don‚Äôt forget to move the card from ‚ÄòIn Progress‚Äô to ‚ÄòReview‚Äô‚ÄîGithub doesn‚Äôt do this automatically.</p><p>Now, wait for your colleague to review your work and request changes if necessary. Keep an eye on Github notifications.</p><p><strong>Need Changes</strong>: If the reviewer requests changes, you need to address them before moving forward. Move the card to this column and work on the feedback provided. Once the required changes are made and the reviewer approves, you can move the card to ‚ÄòDone‚Äô.</p><p><strong>Done</strong>: This is the final stage of the card‚Äôs journey. Your task is now complete, and the result is integrated into our workflow. Be sure to close the issue and associated PR (if applicable).</p><h1><strong>Conclusion</strong></h1><p>Remember that all team members are responsible for managing the flow of cards on the board. It is a collective effort to maintain an organized and efficient workflow. If you are unsure of where a card should go, ask a teammate or team leader for guidance.</p><p>Build something great.</p>",
    "image": "https://assets.decocache.com/dexlabs/84cc2b8e-3a6a-488d-b4d7-b90fbc1ad209/1742477183719-8f26d311-5d53-4614-91c4-051c295e1e9b"
  }
}